{"version":3,"sources":["components/player/player.tsx","components/player/player-container.tsx","services/spotify-auth.ts","services/spotify-player-service.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["Player","isPlaying","useContext","PlayerContext","spotifyPlayerState","paused","className","onClick","pause","play","loadSpotifySDKScript","script","document","createElement","async","src","body","appendChild","PlayerContainer","setDeviceId","setSpotifyPlayerState","trackHistory","setTrackHistory","useEffect","spotifyScript","window","onSpotifyWebPlaybackSDKReady","token","checkSpotifyTokenAndRefresh","player","Spotify","name","getOAuthToken","cb","addListener","message","console","error","state","log","currentTrack","newTrackHistory","isDuplicate","forEach","track","uri","push","addTrackToHistory","track_window","current_track","device_id","setActivePlayer","connect","removeChild","GrantType","cryptoRandomString","require","sha256","Base64","REDIRECT_URI","process","CLIENT_ID","spotifyAuthRequestUri","a","verifierCode","length","type","localStorage","setItem","base64URLEncode","challengeCode","stateCode","getWithExpiry","getUserAccessToken","REFRESH","getItem","grantType","stateResponse","authCode","spotifyRefreshTokenRequest","grant_type","refresh_token","client_id","fetchTokenFromSpotify","spotifyTokenRequest","code","redirect_uri","code_verifier","fetch","method","encodeFormData","headers","spotifyTokens","json","tokens","access_token","setWithExpiry","expires_in","hash","toString","replace","data","Object","keys","map","key","encodeURIComponent","join","SPOTIFY_API_URL","playTrack","trackUris","spotifyToken","Authorization","JSON","stringify","uris","playerId","device_ids","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/6.2f9d3ebf.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\nimport { pause, play } from \"../../services/spotify-player-service\";\nimport \"./player.scss\";\nimport { PlayerContext } from \"./PlayerContext\";\n\nexport const Player = () => {\n  const { spotifyPlayerState } = useContext(PlayerContext);\n  const isPlaying = !spotifyPlayerState.paused;\n\n  const handlePlayClick = () => {\n    play();\n  };\n\n  const handlePauseClick = () => {\n    pause();\n  };\n\n  return (\n    <div className=\"player\">\n      {isPlaying ? (\n        <div onClick={handlePauseClick}>Pause</div>\n      ) : (\n        <div onClick={handlePlayClick}>Play</div>\n      )}\n    </div>\n  );\n};\n","// @ts-nocheck\nimport React, { useContext, useEffect } from \"react\";\nimport { checkSpotifyTokenAndRefresh } from \"../../services/spotify-auth\";\nimport { setActivePlayer } from \"../../services/spotify-player-service\";\nimport { PlayerTrack, SpotifyPlayerState } from \"../../services/spotify-types\";\nimport { Player } from \"./player\";\nimport { PlayerContext } from \"./PlayerContext\";\n\nconst PlayerContainer = () => {\n  const {\n    setDeviceId,\n    setSpotifyPlayerState,\n    trackHistory,\n    setTrackHistory,\n  } = useContext(PlayerContext);\n\n  useEffect(() => {\n    const spotifyScript = loadSpotifySDKScript();\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      const token = checkSpotifyTokenAndRefresh();\n      const player: any = new Spotify.Player({\n        name: \"Spotify Favourites Web Player\",\n        getOAuthToken: (cb) => {\n          cb(token);\n        },\n      });\n\n      const addTrackToHistory = (currentTrack: PlayerTrack) => {\n        // TODO investiagte why trackHistory isn't appearing\n        console.log(\"trackHistory \", trackHistory);\n        const newTrackHistory = [...trackHistory];\n        console.log(\"newTrackHistory \", newTrackHistory);\n        let isDuplicate = false;\n        trackHistory.forEach((track) => {\n          if (track.uri === currentTrack.uri) isDuplicate = true;\n        });\n        if (!isDuplicate) {\n          newTrackHistory.push(currentTrack);\n          setTrackHistory(newTrackHistory);\n        }\n      };\n\n      player.addListener(\"initialization_error\", ({ message }) => {\n        console.error(message);\n      });\n      player.addListener(\"authentication_error\", ({ message }) => {\n        console.error(message);\n      });\n      player.addListener(\"account_error\", ({ message }) => {\n        console.error(message);\n      });\n      player.addListener(\"playback_error\", ({ message }) => {\n        console.error(message);\n      });\n\n      player.addListener(\n        \"player_state_changed\",\n        (state: SpotifyPlayerState) => {\n          console.log(state);\n          setSpotifyPlayerState(state);\n          addTrackToHistory(state.track_window.current_track);\n        }\n      );\n\n      player.addListener(\"ready\", ({ device_id }) => {\n        console.log(\"Ready with Device ID\", device_id);\n        setActivePlayer(device_id);\n        setDeviceId(device_id); // Todo might not need this in state..\n      });\n\n      player.addListener(\"not_ready\", ({ device_id }) => {\n        console.log(\"Device ID has gone offline\", device_id);\n      });\n\n      player.connect();\n    };\n\n    return () => {\n      document.body.removeChild(spotifyScript);\n    };\n  }, []);\n\n  return <Player />;\n};\n\nconst loadSpotifySDKScript = () => {\n  const script = document.createElement(\"script\");\n  script.async = true;\n  script.src = \"https://sdk.scdn.co/spotify-player.js\";\n  document.body.appendChild(script);\n  return script;\n};\n\nexport default PlayerContainer;\n","import { getWithExpiry, setWithExpiry } from \"../util/storage-util\";\n\nconst cryptoRandomString = require(\"crypto-random-string\");\nconst sha256 = require(\"crypto-js/sha256\");\nconst Base64 = require(\"crypto-js/enc-base64\");\n\nconst REDIRECT_URI =\n  process.env.REACT_APP_AUTH_REDIRECT_URI || \"http://localhost:3000/callback\";\nconst CLIENT_ID = \"a3c9a895bbe94102a08574ba4f4adc9e\";\nconst REQUEST_SCOPES = \"user-top-read streaming\";\n\nexport enum GrantType {\n  AUTH = \"authorization_code\",\n  REFRESH = \"refresh_token\",\n}\n\nexport const spotifyAuthRequestUri = async () => {\n  const verifierCode = cryptoRandomString({ length: 48, type: \"url-safe\" });\n  localStorage.setItem(\"verifierCode\", verifierCode);\n\n  const challengeCode = base64URLEncode(await sha256(verifierCode));\n\n  const stateCode = cryptoRandomString({ length: 10, type: \"url-safe\" });\n  localStorage.setItem(\"stateCode\", stateCode);\n\n  return `https://accounts.spotify.com/authorize?response_type=code&client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&code_challenge_method=S256&code_challenge=${challengeCode}&state=${stateCode}&scope=${REQUEST_SCOPES}`;\n};\n\nexport const checkSpotifyTokenAndRefresh = () => {\n  const token = getWithExpiry(\"spotifyToken\");\n\n  if (token) {\n    return token;\n  } else if (getUserAccessToken(GrantType.REFRESH)) {\n    return localStorage.getItem(\"spotifyRefreshToken\");\n  }\n\n  return null;\n};\n\nexport const getUserAccessToken = async (\n  grantType: GrantType,\n  stateResponse?: string,\n  authCode?: string\n): Promise<boolean> => {\n  if (grantType === GrantType.REFRESH) {\n    const spotifyRefreshTokenRequest = {\n      grant_type: grantType,\n      refresh_token: localStorage.getItem(\"spotifyRefreshToken\"),\n      client_id: CLIENT_ID,\n    };\n\n    return fetchTokenFromSpotify(spotifyRefreshTokenRequest);\n  } else if (localStorage.getItem(\"stateCode\") === stateResponse) {\n    const spotifyTokenRequest = {\n      client_id: CLIENT_ID,\n      grant_type: grantType,\n      code: authCode,\n      redirect_uri: REDIRECT_URI,\n      code_verifier: localStorage.getItem(\"verifierCode\"),\n    };\n\n    return await fetchTokenFromSpotify(spotifyTokenRequest);\n  }\n\n  return false;\n};\n\nconst fetchTokenFromSpotify = async (spotifyTokenRequest: {}): Promise<\n  boolean\n> => {\n  const spotifyTokens = await fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    body: encodeFormData(spotifyTokenRequest),\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n  });\n\n  const tokens = await spotifyTokens.json();\n  if (tokens.access_token) {\n    setWithExpiry(\"spotifyToken\", tokens.access_token, tokens.expires_in);\n    localStorage.setItem(\"spotifyRefreshToken\", tokens.refresh_token);\n    return true;\n  }\n\n  return false;\n};\n\nconst base64URLEncode = (hash: any): string => {\n  return hash\n    .toString(Base64)\n    .replace(/=/g, \"\")\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\");\n};\n\nconst encodeFormData = (data: any) => {\n  return Object.keys(data)\n    .map((key) => encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]))\n    .join(\"&\");\n};\ninterface UserToken {\n  access_token: string;\n  refresh_token: string;\n  expires_in: number;\n}\n","import { checkSpotifyTokenAndRefresh } from \"./spotify-auth\";\n\nconst SPOTIFY_API_URL = \"https://api.spotify.com/v1/me/player\";\n\nexport const playTrack = async (trackUris: string[]) => {\n  const spotifyToken = checkSpotifyTokenAndRefresh();\n\n  fetch(`${SPOTIFY_API_URL}/play`, {\n    method: \"PUT\",\n    headers: {\n      Authorization: `Bearer ${spotifyToken}`,\n    },\n    body: JSON.stringify({ uris: trackUris }),\n  });\n};\n\nexport const play = async () => {\n  const spotifyToken = checkSpotifyTokenAndRefresh();\n\n  fetch(`${SPOTIFY_API_URL}/play`, {\n    method: \"PUT\",\n    headers: {\n      Authorization: `Bearer ${spotifyToken}`,\n    },\n  });\n};\n\nexport const pause = async () => {\n  const spotifyToken = checkSpotifyTokenAndRefresh();\n\n  fetch(`${SPOTIFY_API_URL}/pause`, {\n    method: \"PUT\",\n    headers: {\n      Authorization: `Bearer ${spotifyToken}`,\n    },\n  });\n};\n\nexport const next = async () => {\n  const spotifyToken = checkSpotifyTokenAndRefresh();\n\n  fetch(`${SPOTIFY_API_URL}/next`, {\n    method: \"PUT\",\n    headers: {\n      Authorization: `Bearer ${spotifyToken}`,\n    },\n  });\n};\n\nexport const previous = async () => {\n  const spotifyToken = checkSpotifyTokenAndRefresh();\n\n  fetch(`${SPOTIFY_API_URL}/previous`, {\n    method: \"PUT\",\n    headers: {\n      Authorization: `Bearer ${spotifyToken}`,\n    },\n  });\n};\n\nexport const setActivePlayer = async (playerId: string, play = false) => {\n  const spotifyToken = checkSpotifyTokenAndRefresh();\n\n  fetch(SPOTIFY_API_URL, {\n    method: \"PUT\",\n    headers: {\n      Authorization: `Bearer ${spotifyToken}`,\n    },\n    body: JSON.stringify({ device_ids: [playerId], play }),\n  });\n};\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}