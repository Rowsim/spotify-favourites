{"version":3,"sources":["assets/images/spotify-logo.svg","components/spotify-sign-in/spotify-sign-in.tsx","services/spotify-auth.ts"],"names":["module","exports","SpotifySignIn","useState","authRequestUri","setRequestAuthUri","useEffect","spotifyAuthRequestUri","then","className","href","src","spotifyLogoSvg","alt","GrantType","cryptoRandomString","require","sha256","Base64","CLIENT_ID","a","verifierCode","length","type","localStorage","setItem","base64URLEncode","challengeCode","stateCode","checkSpotifyTokenAndRefresh","token","getWithExpiry","getUserAccessToken","REFRESH","getItem","grantType","stateResponse","authCode","spotifyRefreshTokenRequest","grant_type","refresh_token","client_id","fetchTokenFromSpotify","spotifyTokenRequest","code","redirect_uri","code_verifier","fetch","method","body","encodeFormData","headers","spotifyTokens","json","tokens","access_token","setWithExpiry","expires_in","hash","toString","replace","data","Object","keys","map","key","encodeURIComponent","join"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,0C,2HCsB5BC,UAjBO,WAAO,IAAD,EACkBC,mBAAS,IAD3B,mBACnBC,EADmB,KACHC,EADG,KAO1B,OAJAC,qBAAU,WACRC,cAAwBC,KAAKH,KAC5B,IAGD,yBAAKI,UAAU,mBACb,uBAAGC,KAAMN,EAAgBK,UAAU,yBACjC,gDACA,yBAAKE,IAAKC,IAAgBC,IAAI,qB,4KCJ1BC,E,iCAVNC,EAAqBC,EAAQ,IAC7BC,EAASD,EAAQ,IACjBE,EAASF,EAAQ,IAGjBG,EAAY,oC,SAKNL,K,0BAAAA,E,yBAAAA,M,KAKL,IAAMP,EAAqB,uCAAG,gCAAAa,EAAA,6DAC7BC,EAAeN,EAAmB,CAAEO,OAAQ,GAAIC,KAAM,aAC5DC,aAAaC,QAAQ,eAAgBJ,GAFF,KAIbK,EAJa,SAIST,EAAOI,GAJhB,0BAI7BM,GAJ6B,cAM7BC,EAAYb,EAAmB,CAAEO,OAAQ,GAAIC,KAAM,aACzDC,aAAaC,QAAQ,YAAaG,GAPC,gGAS2CT,EAT3C,yBAThB,iCASgB,sDAS+HQ,EAT/H,kBASsJC,EATtJ,kBAPnC,wJAOmC,4CAAH,qDAYrBC,EAA8B,WACzC,IAAMC,EAAQC,YAAc,gBAE5B,OAAID,IAEOE,EAAmBlB,EAAUmB,SAC/BT,aAAaU,QAAQ,uBAGvB,OAGIF,EAAkB,uCAAG,WAChCG,EACAC,EACAC,GAHgC,iBAAAjB,EAAA,yDAK5Be,IAAcrB,EAAUmB,QALI,uBAMxBK,EAA6B,CACjCC,WAAYJ,EACZK,cAAehB,aAAaU,QAAQ,uBACpCO,UAAWtB,GATiB,kBAYvBuB,EAAsBJ,IAZC,UAarBd,aAAaU,QAAQ,eAAiBE,EAbjB,wBAcxBO,EAAsB,CAC1BF,UAAWtB,EACXoB,WAAYJ,EACZS,KAAMP,EACNQ,aAnDe,iCAoDfC,cAAetB,aAAaU,QAAQ,iBAnBR,SAsBjBQ,EAAsBC,GAtBL,0EAyBzB,GAzByB,4CAAH,0DA4BzBD,EAAqB,uCAAG,WAAOC,GAAP,iBAAAvB,EAAA,sEAGA2B,MAAM,yCAA0C,CAC1EC,OAAQ,OACRC,KAAMC,EAAeP,GACrBQ,QAAS,CACP,eAAgB,uCAPQ,cAGtBC,EAHsB,gBAWPA,EAAcC,OAXP,YAWtBC,EAXsB,QAYjBC,aAZiB,wBAa1BC,YAAc,eAAgBF,EAAOC,aAAcD,EAAOG,YAC1DjC,aAAaC,QAAQ,sBAAuB6B,EAAOd,eAdzB,mBAenB,GAfmB,kCAkBrB,GAlBqB,4CAAH,sDAqBrBd,EAAkB,SAACgC,GACvB,OAAOA,EACJC,SAASzC,GACT0C,QAAQ,KAAM,IACdA,QAAQ,MAAO,KACfA,QAAQ,MAAO,MAGdV,EAAiB,SAACW,GACtB,OAAOC,OAAOC,KAAKF,GAChBG,KAAI,SAACC,GAAD,OAASC,mBAAmBD,GAAO,IAAMC,mBAAmBL,EAAKI,OACrEE,KAAK,O","file":"static/js/5.4036d403.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spotify-logo.e359ad39.svg\";","import React, { useEffect, useState } from \"react\";\r\nimport { spotifyAuthRequestUri } from \"../../services/spotify-auth\";\r\nimport spotifyLogoSvg from \"../../assets/images/spotify-logo.svg\";\r\nimport \"./spotify-sign-in.scss\";\r\n\r\nconst SpotifySignIn = () => {\r\n  const [authRequestUri, setRequestAuthUri] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    spotifyAuthRequestUri().then(setRequestAuthUri);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"spotify-sign-in\">\r\n      <a href={authRequestUri} className=\"spotify-sign-in__link\">\r\n        <div>Connect Spotify</div>\r\n        <img src={spotifyLogoSvg} alt=\"spotify-logo\" />\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpotifySignIn;\r\n","import { getWithExpiry, setWithExpiry } from \"../util/storage-util\";\r\n\r\nconst cryptoRandomString = require(\"crypto-random-string\");\r\nconst sha256 = require(\"crypto-js/sha256\");\r\nconst Base64 = require(\"crypto-js/enc-base64\");\r\n\r\n//env variables?\r\nconst CLIENT_ID = \"a3c9a895bbe94102a08574ba4f4adc9e\";\r\nconst REDIRECT_URI = \"http://localhost:3000/callback\";\r\nconst SCOPES =\r\n  \"user-top-read,streaming,user-read-recently-played,user-read-playback-state,user-library-read,user-read-currently-playing,user-modify-playback-state\";\r\n\r\nexport enum GrantType {\r\n  AUTH = \"authorization_code\",\r\n  REFRESH = \"refresh_token\",\r\n}\r\n\r\nexport const spotifyAuthRequestUri = async () => {\r\n  const verifierCode = cryptoRandomString({ length: 48, type: \"url-safe\" });\r\n  localStorage.setItem(\"verifierCode\", verifierCode);\r\n\r\n  const challengeCode = base64URLEncode(await sha256(verifierCode));\r\n\r\n  const stateCode = cryptoRandomString({ length: 10, type: \"url-safe\" });\r\n  localStorage.setItem(\"stateCode\", stateCode);\r\n\r\n  return `https://accounts.spotify.com/authorize?response_type=code&client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&code_challenge_method=S256&code_challenge=${challengeCode}&state=${stateCode}&scope=${SCOPES}`;\r\n};\r\n\r\nexport const checkSpotifyTokenAndRefresh = () => {\r\n  const token = getWithExpiry(\"spotifyToken\");\r\n\r\n  if (token) {\r\n    return token;\r\n  } else if (getUserAccessToken(GrantType.REFRESH)) {\r\n    return localStorage.getItem(\"spotifyRefreshToken\");\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const getUserAccessToken = async (\r\n  grantType: GrantType,\r\n  stateResponse?: string,\r\n  authCode?: string\r\n): Promise<boolean> => {\r\n  if (grantType === GrantType.REFRESH) {\r\n    const spotifyRefreshTokenRequest = {\r\n      grant_type: grantType,\r\n      refresh_token: localStorage.getItem(\"spotifyRefreshToken\"),\r\n      client_id: CLIENT_ID,\r\n    };\r\n\r\n    return fetchTokenFromSpotify(spotifyRefreshTokenRequest);\r\n  } else if (localStorage.getItem(\"stateCode\") === stateResponse) {\r\n    const spotifyTokenRequest = {\r\n      client_id: CLIENT_ID,\r\n      grant_type: grantType,\r\n      code: authCode,\r\n      redirect_uri: REDIRECT_URI,\r\n      code_verifier: localStorage.getItem(\"verifierCode\"),\r\n    };\r\n\r\n    return await fetchTokenFromSpotify(spotifyTokenRequest);\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst fetchTokenFromSpotify = async (spotifyTokenRequest: {}): Promise<\r\n  boolean\r\n> => {\r\n  const spotifyTokens = await fetch(\"https://accounts.spotify.com/api/token\", {\r\n    method: \"POST\",\r\n    body: encodeFormData(spotifyTokenRequest),\r\n    headers: {\r\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n    },\r\n  });\r\n\r\n  const tokens = await spotifyTokens.json();\r\n  if (tokens.access_token) {\r\n    setWithExpiry(\"spotifyToken\", tokens.access_token, tokens.expires_in);\r\n    localStorage.setItem(\"spotifyRefreshToken\", tokens.refresh_token);\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nconst base64URLEncode = (hash: any): string => {\r\n  return hash\r\n    .toString(Base64)\r\n    .replace(/=/g, \"\")\r\n    .replace(/\\+/g, \"-\")\r\n    .replace(/\\//g, \"_\");\r\n};\r\n\r\nconst encodeFormData = (data: any) => {\r\n  return Object.keys(data)\r\n    .map((key) => encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]))\r\n    .join(\"&\");\r\n};\r\ninterface UserToken {\r\n  access_token: string;\r\n  refresh_token: string;\r\n  expires_in: number;\r\n}\r\n"],"sourceRoot":""}