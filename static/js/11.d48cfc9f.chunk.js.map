{"version":3,"sources":["pages/home.tsx","util/storage-util.ts","components/player/PlayerContext.tsx"],"names":["SpotifySignInLazy","lazy","TopControlsLazy","SpotifyTopArtistsLazy","SpotifyTopTracksLazy","SpotifyPlayerContainerLazy","SetupLoadingLazy","HomePage","useContext","AppContext","hasSpotifyToken","setHasSpotifyToken","favouritesType","playerWebSDKConnected","useEffect","getWithExpiry","setWithExpiry","key","value","ttlSeconds","item","expiry","Date","getTime","localStorage","setItem","JSON","stringify","itemStorage","getItem","parse","removeItem","PlayerContext","createContext","deviceId","setDeviceId","spotifyPlayerState","setSpotifyPlayerState","trackHistory","setTrackHistory","PlayerProvider","children","useState","Provider"],"mappings":"iIAAA,mDAKMA,EAAoBC,gBACxB,kBAAM,uDAEFC,EAAkBD,gBACtB,kBAAM,uDAEFE,EAAwBF,gBAC5B,kBAAM,8DAEFG,EAAuBH,gBAC3B,kBAAM,uDAEFI,EAA6BJ,gBACjC,kBAAM,uDAEFK,EAAmBL,gBAAK,kBAAM,kCAwCrBM,UAtCE,WAAO,IAAD,EAMjBC,qBAAWC,KAJbC,EAFmB,EAEnBA,gBACAC,EAHmB,EAGnBA,mBACAC,EAJmB,EAInBA,eACAC,EALmB,EAKnBA,sBAMF,OAJAC,qBAAU,WACRH,EAAoD,MAAjCI,YAAc,mBAChC,CAACJ,IAGF,oCACGD,EACC,oCACE,kBAAC,IAAD,KACE,kBAACL,EAAD,MACCQ,EACC,oCACE,kBAACX,EAAD,MACoB,WAAnBU,EACC,kBAACR,EAAD,MAEA,kBAACD,EAAD,OAIJ,kBAACG,EAAD,QAKN,kBAACN,EAAD,S,gCCtDR,oEAAO,IAAMgB,EAAgB,SAACC,EAAaC,EAAYC,GACrD,IAEMC,EAAO,CACXF,MAAOA,EACPG,QAJU,IAAIC,MAIFC,UAAyB,IAAbJ,GAG1BK,aAAaC,QAAQR,EAAKS,KAAKC,UAAUP,KAG9BL,EAAgB,SAACE,GAC5B,IAAMW,EAAcJ,aAAaK,QAAQZ,GACzC,IAAKW,EACH,OAAO,KAGT,IAAMR,EAAOM,KAAKI,MAAMF,GAGxB,OAFY,IAAIN,MAERC,UAAYH,EAAKC,QACvBG,aAAaO,WAAWd,GACjB,MAGFG,EAAKF,Q,+HCbDc,EAAgBC,wBAAiC,CAC5DC,SAAU,GACVC,YAAa,aACbC,mBAAoB,GACpBC,sBAAuB,aACvBC,aAAc,GACdC,gBAAiB,eAGNC,EAAiB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SAAoB,EACnBC,mBAAS,IADU,mBAC5CR,EAD4C,KAClCC,EADkC,OAECO,mBAClD,IAHiD,mBAE5CN,EAF4C,KAExBC,EAFwB,OAKXK,mBAAS,IALE,mBAK5CJ,EAL4C,KAK9BC,EAL8B,KAOnD,OACE,kBAACP,EAAcW,SAAf,CACEzB,MAAO,CACLgB,WACAC,cACAC,qBACAC,wBACAC,eACAC,oBAGDE","file":"static/js/11.d48cfc9f.chunk.js","sourcesContent":["import React, { lazy, useContext, useEffect } from \"react\";\nimport { AppContext } from \"../AppContext\";\nimport { PlayerProvider } from \"../components/player/PlayerContext\";\nimport { getWithExpiry } from \"../util/storage-util\";\n\nconst SpotifySignInLazy = lazy(\n  () => import(\"../components/spotify-sign-in/spotify-sign-in\")\n);\nconst TopControlsLazy = lazy(\n  () => import(\"../components/top-controls/top-controls\")\n);\nconst SpotifyTopArtistsLazy = lazy(\n  () => import(\"../components/spotify-top/spotify-top-artists\")\n);\nconst SpotifyTopTracksLazy = lazy(\n  () => import(\"../components/spotify-top/spotify-top-tracks\")\n);\nconst SpotifyPlayerContainerLazy = lazy(\n  () => import(\"../components/player/player-container\")\n);\nconst SetupLoadingLazy = lazy(() => import(\"../components/loading/setup-load\"));\n\nconst HomePage = () => {\n  const {\n    hasSpotifyToken,\n    setHasSpotifyToken,\n    favouritesType,\n    playerWebSDKConnected,\n  } = useContext(AppContext);\n  useEffect(() => {\n    setHasSpotifyToken(getWithExpiry(\"spotifyToken\") != null);\n  }, [setHasSpotifyToken]);\n\n  return (\n    <>\n      {hasSpotifyToken ? (\n        <>\n          <PlayerProvider>\n            <SpotifyPlayerContainerLazy />\n            {playerWebSDKConnected ? (\n              <>\n                <TopControlsLazy />\n                {favouritesType === \"tracks\" ? (\n                  <SpotifyTopTracksLazy />\n                ) : (\n                  <SpotifyTopArtistsLazy />\n                )}\n              </>\n            ) : (\n              <SetupLoadingLazy />\n            )}\n          </PlayerProvider>\n        </>\n      ) : (\n        <SpotifySignInLazy />\n      )}\n    </>\n  );\n};\n\nexport default HomePage;\n","export const setWithExpiry = (key: string, value: any, ttlSeconds: number) => {\n  const now = new Date();\n\n  const item = {\n    value: value,\n    expiry: now.getTime() + ttlSeconds * 1000,\n  };\n\n  localStorage.setItem(key, JSON.stringify(item));\n};\n\nexport const getWithExpiry = (key: string) => {\n  const itemStorage = localStorage.getItem(key);\n  if (!itemStorage) {\n    return null;\n  }\n\n  const item = JSON.parse(itemStorage);\n  const now = new Date();\n\n  if (now.getTime() > item.expiry) {\n    localStorage.removeItem(key);\n    return null;\n  }\n\n  return item.value;\n};\n","import React, { createContext, useState } from \"react\";\nimport { PlayerTrack, SpotifyPlayerState } from \"../../services/spotify-types\";\n\ninterface PlayerContextType {\n  deviceId: string;\n  setDeviceId: Function;\n  spotifyPlayerState: SpotifyPlayerState;\n  setSpotifyPlayerState: Function;\n  trackHistory: PlayerTrack[];\n  setTrackHistory: Function;\n}\n\nexport const PlayerContext = createContext<PlayerContextType>({\n  deviceId: \"\",\n  setDeviceId: () => {},\n  spotifyPlayerState: {} as SpotifyPlayerState,\n  setSpotifyPlayerState: () => {},\n  trackHistory: [],\n  setTrackHistory: () => {}\n});\n\nexport const PlayerProvider = ({ children }: any) => {\n  const [deviceId, setDeviceId] = useState(\"\");\n  const [spotifyPlayerState, setSpotifyPlayerState] = useState(\n    {} as SpotifyPlayerState\n  );\n  const [trackHistory, setTrackHistory] = useState([]);\n\n  return (\n    <PlayerContext.Provider\n      value={{\n        deviceId,\n        setDeviceId,\n        spotifyPlayerState,\n        setSpotifyPlayerState,\n        trackHistory,\n        setTrackHistory\n      }}\n    >\n      {children}\n    </PlayerContext.Provider>\n  );\n};\n"],"sourceRoot":""}