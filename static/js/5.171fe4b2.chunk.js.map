{"version":3,"sources":["assets/images/spotify-logo.svg","components/spotify-sign-in/spotify-sign-in.tsx","services/spotify-auth.ts"],"names":["module","exports","SpotifySignIn","useState","authRequestUri","setRequestAuthUri","useEffect","spotifyAuthRequestUri","then","className","href","src","spotifyLogoSvg","alt","GrantType","cryptoRandomString","require","sha256","Base64","REDIRECT_URI","process","CLIENT_ID","a","verifierCode","length","type","localStorage","setItem","base64URLEncode","challengeCode","stateCode","checkSpotifyTokenAndRefresh","token","getWithExpiry","getUserAccessToken","REFRESH","getItem","grantType","stateResponse","authCode","spotifyRefreshTokenRequest","grant_type","refresh_token","client_id","fetchTokenFromSpotify","spotifyTokenRequest","code","redirect_uri","code_verifier","fetch","method","body","encodeFormData","headers","spotifyTokens","json","tokens","access_token","setWithExpiry","expires_in","hash","toString","replace","data","Object","keys","map","key","encodeURIComponent","join"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,0C,0HCsB5BC,UAjBO,WAAO,IAAD,EACkBC,mBAAS,IAD3B,mBACnBC,EADmB,KACHC,EADG,KAO1B,OAJAC,qBAAU,WACRC,cAAwBC,KAAKH,KAC5B,IAGD,yBAAKI,UAAU,mBACb,uBAAGC,KAAMN,EAAgBK,UAAU,yBACjC,gDACA,yBAAKE,IAAKC,IAAgBC,IAAI,qB,4KCL1BC,E,iCATNC,EAAqBC,EAAQ,IAC7BC,EAASD,EAAQ,KACjBE,EAASF,EAAQ,KAEjBG,EACJC,uDACIC,EAAY,oC,SAGNP,K,0BAAAA,E,yBAAAA,M,KAKL,IAAMP,EAAqB,uCAAG,gCAAAe,EAAA,6DAC7BC,EAAeR,EAAmB,CAAES,OAAQ,GAAIC,KAAM,aAC5DC,aAAaC,QAAQ,eAAgBJ,GAFF,KAIbK,EAJa,SAISX,EAAOM,GAJhB,0BAI7BM,GAJ6B,cAM7BC,EAAYf,EAAmB,CAAES,OAAQ,GAAIC,KAAM,aACzDC,aAAaC,QAAQ,YAAaG,GAPC,gGAS2CT,EAT3C,yBASqEF,EATrE,sDAS+HU,EAT/H,kBASsJC,EATtJ,kBAPd,kBAOc,4CAAH,qDAYrBC,EAA8B,WACzC,IAAMC,EAAQC,YAAc,gBAE5B,OAAID,IAEOE,EAAmBpB,EAAUqB,SAC/BT,aAAaU,QAAQ,uBAGvB,OAGIF,EAAkB,uCAAG,WAChCG,EACAC,EACAC,GAHgC,iBAAAjB,EAAA,yDAK5Be,IAAcvB,EAAUqB,QALI,uBAMxBK,EAA6B,CACjCC,WAAYJ,EACZK,cAAehB,aAAaU,QAAQ,uBACpCO,UAAWtB,GATiB,kBAYvBuB,EAAsBJ,IAZC,UAarBd,aAAaU,QAAQ,eAAiBE,EAbjB,wBAcxBO,EAAsB,CAC1BF,UAAWtB,EACXoB,WAAYJ,EACZS,KAAMP,EACNQ,aAAc5B,EACd6B,cAAetB,aAAaU,QAAQ,iBAnBR,SAsBjBQ,EAAsBC,GAtBL,0EAyBzB,GAzByB,4CAAH,0DA4BzBD,EAAqB,uCAAG,WAAOC,GAAP,iBAAAvB,EAAA,sEAGA2B,MAAM,yCAA0C,CAC1EC,OAAQ,OACRC,KAAMC,EAAeP,GACrBQ,QAAS,CACP,eAAgB,uCAPQ,cAGtBC,EAHsB,gBAWPA,EAAcC,OAXP,YAWtBC,EAXsB,QAYjBC,aAZiB,wBAa1BC,YAAc,eAAgBF,EAAOC,aAAcD,EAAOG,YAC1DjC,aAAaC,QAAQ,sBAAuB6B,EAAOd,eAdzB,mBAenB,GAfmB,kCAkBrB,GAlBqB,4CAAH,sDAqBrBd,EAAkB,SAACgC,GACvB,OAAOA,EACJC,SAAS3C,GACT4C,QAAQ,KAAM,IACdA,QAAQ,MAAO,KACfA,QAAQ,MAAO,MAGdV,EAAiB,SAACW,GACtB,OAAOC,OAAOC,KAAKF,GAChBG,KAAI,SAACC,GAAD,OAASC,mBAAmBD,GAAO,IAAMC,mBAAmBL,EAAKI,OACrEE,KAAK,O","file":"static/js/5.171fe4b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spotify-logo.e359ad39.svg\";","import React, { useEffect, useState } from \"react\";\nimport { spotifyAuthRequestUri } from \"../../services/spotify-auth\";\nimport spotifyLogoSvg from \"../../assets/images/spotify-logo.svg\";\nimport \"./spotify-sign-in.scss\";\n\nconst SpotifySignIn = () => {\n  const [authRequestUri, setRequestAuthUri] = useState(\"\");\n\n  useEffect(() => {\n    spotifyAuthRequestUri().then(setRequestAuthUri);\n  }, []);\n\n  return (\n    <div className=\"spotify-sign-in\">\n      <a href={authRequestUri} className=\"spotify-sign-in__link\">\n        <div>Connect Spotify</div>\n        <img src={spotifyLogoSvg} alt=\"spotify-logo\" />\n      </a>\n    </div>\n  );\n};\n\nexport default SpotifySignIn;\n","import { getWithExpiry, setWithExpiry } from \"../util/storage-util\";\n\nconst cryptoRandomString = require(\"crypto-random-string\");\nconst sha256 = require(\"crypto-js/sha256\");\nconst Base64 = require(\"crypto-js/enc-base64\");\n\nconst REDIRECT_URI =\n  process.env.REACT_APP_AUTH_REDIRECT_URI || \"http://localhost:3000/callback\";\nconst CLIENT_ID = \"a3c9a895bbe94102a08574ba4f4adc9e\";\nconst REQUEST_SCOPES = \"user-top-read\";\n\nexport enum GrantType {\n  AUTH = \"authorization_code\",\n  REFRESH = \"refresh_token\",\n}\n\nexport const spotifyAuthRequestUri = async () => {\n  const verifierCode = cryptoRandomString({ length: 48, type: \"url-safe\" });\n  localStorage.setItem(\"verifierCode\", verifierCode);\n\n  const challengeCode = base64URLEncode(await sha256(verifierCode));\n\n  const stateCode = cryptoRandomString({ length: 10, type: \"url-safe\" });\n  localStorage.setItem(\"stateCode\", stateCode);\n\n  return `https://accounts.spotify.com/authorize?response_type=code&client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&code_challenge_method=S256&code_challenge=${challengeCode}&state=${stateCode}&scope=${REQUEST_SCOPES}`;\n};\n\nexport const checkSpotifyTokenAndRefresh = () => {\n  const token = getWithExpiry(\"spotifyToken\");\n\n  if (token) {\n    return token;\n  } else if (getUserAccessToken(GrantType.REFRESH)) {\n    return localStorage.getItem(\"spotifyRefreshToken\");\n  }\n\n  return null;\n};\n\nexport const getUserAccessToken = async (\n  grantType: GrantType,\n  stateResponse?: string,\n  authCode?: string\n): Promise<boolean> => {\n  if (grantType === GrantType.REFRESH) {\n    const spotifyRefreshTokenRequest = {\n      grant_type: grantType,\n      refresh_token: localStorage.getItem(\"spotifyRefreshToken\"),\n      client_id: CLIENT_ID,\n    };\n\n    return fetchTokenFromSpotify(spotifyRefreshTokenRequest);\n  } else if (localStorage.getItem(\"stateCode\") === stateResponse) {\n    const spotifyTokenRequest = {\n      client_id: CLIENT_ID,\n      grant_type: grantType,\n      code: authCode,\n      redirect_uri: REDIRECT_URI,\n      code_verifier: localStorage.getItem(\"verifierCode\"),\n    };\n\n    return await fetchTokenFromSpotify(spotifyTokenRequest);\n  }\n\n  return false;\n};\n\nconst fetchTokenFromSpotify = async (spotifyTokenRequest: {}): Promise<\n  boolean\n> => {\n  const spotifyTokens = await fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    body: encodeFormData(spotifyTokenRequest),\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n  });\n\n  const tokens = await spotifyTokens.json();\n  if (tokens.access_token) {\n    setWithExpiry(\"spotifyToken\", tokens.access_token, tokens.expires_in);\n    localStorage.setItem(\"spotifyRefreshToken\", tokens.refresh_token);\n    return true;\n  }\n\n  return false;\n};\n\nconst base64URLEncode = (hash: any): string => {\n  return hash\n    .toString(Base64)\n    .replace(/=/g, \"\")\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\");\n};\n\nconst encodeFormData = (data: any) => {\n  return Object.keys(data)\n    .map((key) => encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]))\n    .join(\"&\");\n};\ninterface UserToken {\n  access_token: string;\n  refresh_token: string;\n  expires_in: number;\n}\n"],"sourceRoot":""}