{"version":3,"sources":["AppContext.tsx","AppTheme.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppContext","createContext","hasSpotifyToken","setHasSpotifyToken","favouritesType","setFavouritesType","selectedTimeRange","setSelectedTimeRange","topTracks","setTopTracks","topArtists","setTopArtists","AppProvider","children","useState","Provider","value","appTheme","font","fontAlt","primary","secondary","background","HomePage","lazy","CallbackPage","App","basename","fallback","theme","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAgBaA,EAAaC,wBAA8B,CACtDC,iBAAiB,EACjBC,mBAAoB,aACpBC,eAAgB,UAChBC,kBAAmB,aACnBC,kBAAmB,SACnBC,qBAAsB,aACtBC,UAAW,GACXC,aAAc,aACdC,WAAY,GACZC,cAAe,eAGJC,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SAAoB,EACFC,oBAAS,GADP,mBACzCZ,EADyC,KACxBC,EADwB,OAEJW,mBAAS,WAFL,mBAEzCV,EAFyC,KAEzBC,EAFyB,OAGES,mBAAS,UAHX,mBAGzCR,EAHyC,KAGtBC,EAHsB,OAIdO,mBAAS,IAJK,mBAIzCN,EAJyC,KAI9BC,EAJ8B,OAKZK,mBAAS,IALG,mBAKzCJ,EALyC,KAK7BC,EAL6B,KAOhD,OACE,kBAACX,EAAWe,SAAZ,CACEC,MAAO,CACLd,kBACAC,qBACAC,iBACAC,oBACAC,oBACAC,uBACAC,YACAC,eACAC,aACAC,kBAGDE,K,4KCnDMI,EAAW,CACtBC,KAAM,GACNC,QAAS,4BACTC,QAAS,QACTC,UAAW,UACXC,WAAY,WCCRC,EAAWC,gBAAK,kBAAM,kCACtBC,EAAeD,gBAAK,kBAAM,uDAmBjBE,MAjBf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAS,sBACf,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAeC,MAAOZ,GACpB,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,yBAAyBC,UAAWT,IACtD,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,YAAYC,UAAWP,UCLnCQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ce2471f6.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\nimport { Artist, Track } from \"./services/spotify-types\";\n\ninterface AppContextType {\n  hasSpotifyToken: boolean;\n  setHasSpotifyToken: Function;\n  favouritesType: string;\n  setFavouritesType: Function;\n  selectedTimeRange: string;\n  setSelectedTimeRange: Function;\n  topTracks: Array<Track>;\n  setTopTracks: Function;\n  topArtists: Array<Artist>;\n  setTopArtists: Function;\n}\n\nexport const AppContext = createContext<AppContextType>({\n  hasSpotifyToken: false,\n  setHasSpotifyToken: () => {},\n  favouritesType: \"artists\",\n  setFavouritesType: () => {},\n  selectedTimeRange: \"medium\",\n  setSelectedTimeRange: () => {},\n  topTracks: [],\n  setTopTracks: () => {},\n  topArtists: [],\n  setTopArtists: () => {},\n});\n\nexport const AppProvider = ({ children }: any) => {\n  const [hasSpotifyToken, setHasSpotifyToken] = useState(false);\n  const [favouritesType, setFavouritesType] = useState(\"artists\");\n  const [selectedTimeRange, setSelectedTimeRange] = useState(\"medium\");\n  const [topTracks, setTopTracks] = useState([]);\n  const [topArtists, setTopArtists] = useState([]);\n\n  return (\n    <AppContext.Provider\n      value={{\n        hasSpotifyToken,\n        setHasSpotifyToken,\n        favouritesType,\n        setFavouritesType,\n        selectedTimeRange,\n        setSelectedTimeRange,\n        topTracks,\n        setTopTracks,\n        topArtists,\n        setTopArtists,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n","export const appTheme = {\n  font: \"\",\n  fontAlt: \"Permanent Marker, cursive\",\n  primary: \"white\",\n  secondary: \"#fd6500\",\n  background: \"#191414\",\n};\n","import React, { Suspense, lazy } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ThemeProvider } from \"styled-components\";\nimport { AppProvider } from \"./AppContext\";\nimport { appTheme } from \"./AppTheme\";\n\nconst HomePage = lazy(() => import(\"./pages/home\"));\nconst CallbackPage = lazy(() => import(\"./pages/callback\"));\n\nfunction App() {\n  return (\n    <Router basename=\"spotify-favourites\">\n      <Suspense fallback={<div>Loading...</div>}>\n        <Switch>\n          <AppProvider>\n            <ThemeProvider theme={appTheme}>\n              <Route exact path=\"/(|spotify-favourites)\" component={HomePage} />\n              <Route exact path=\"/callback\" component={CallbackPage} />\n            </ThemeProvider>\n          </AppProvider>\n        </Switch>\n      </Suspense>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}