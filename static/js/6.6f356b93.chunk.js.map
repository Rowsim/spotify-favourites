{"version":3,"sources":["services/spotify-service.ts","components/title/styled-title.tsx","components/spotify-top/spotify-top-artists.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","services/spotify-auth.ts"],"names":["SPOTIFY_API_URL","getUserTopArtists","timeRange","limit","a","spotifyToken","checkSpotifyTokenAndRefresh","console","log","fetch","method","headers","Authorization","userTopArtistsResults","json","Promise","reject","getUserTopTracks","userTopTracksResponse","StyledTitle","styled","h1","props","fontSize","theme","fontAlt","primary","ArtistSelector","artist","selected","setSelectedArtist","onClick","e","className","alt","width","height","src","images","url","name","SelectedArtist","popularity","genres","length","map","genre","index","key","followers","Intl","NumberFormat","format","total","SpotifyTopArtists","useContext","AppContext","topArtists","setTopArtists","selectedTimeRange","useState","prevSelectedTimeRange","saveSelectedTimeRange","selectedArtist","scrollSelector","left","selectorElement","document","querySelector","scrollAmount","offsetWidth","scrollBy","top","behavior","useEffect","then","result","items","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value","GrantType","cryptoRandomString","require","sha256","Base64","REDIRECT_URI","process","CLIENT_ID","spotifyAuthRequestUri","verifierCode","type","localStorage","setItem","base64URLEncode","challengeCode","stateCode","token","getWithExpiry","getUserAccessToken","REFRESH","getItem","grantType","stateResponse","authCode","spotifyRefreshTokenRequest","grant_type","refresh_token","client_id","fetchTokenFromSpotify","spotifyTokenRequest","code","redirect_uri","code_verifier","body","encodeFormData","spotifyTokens","tokens","access_token","setWithExpiry","expires_in","hash","toString","replace","data","keys","encodeURIComponent","join"],"mappings":"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","file":"static/js/6.6f356b93.chunk.js","sourcesContent":["import { checkSpotifyTokenAndRefresh } from \"./spotify-auth\";\nimport { Artist, Track } from \"./spotify-types\";\n\nconst SPOTIFY_API_URL = \"https://api.spotify.com/v1\";\n\nexport const getUserTopArtists = async (\n  timeRange: string,\n  limit?: number\n): Promise<UserTopArtists> => {\n  const spotifyToken = checkSpotifyTokenAndRefresh();\n  if (spotifyToken) {\n    console.log(`GET ${SPOTIFY_API_URL}/me/top/artists`)\n    const userTopArtistsResults = await fetch(\n      `${SPOTIFY_API_URL}/me/top/artists?time_range=${timeRange}${\n        limit ? `&limit=${limit}` : \"\"\n      }`,\n      {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${spotifyToken}`,\n        },\n      }\n    );\n\n    return userTopArtistsResults.json();\n  }\n\n  return Promise.reject(\"Invalid spotify auth token :(\");\n};\n\nexport const getUserTopTracks = async (\n  timeRange: string,\n  limit?: number\n): Promise<UserTopTracks> => {\n  const spotifyToken = checkSpotifyTokenAndRefresh();\n  if (spotifyToken) {\n    console.log(`GET ${SPOTIFY_API_URL}/me/top/tracks`)\n    const userTopTracksResponse = await fetch(\n      `${SPOTIFY_API_URL}/me/top/tracks?time_range=${timeRange}${\n        limit ? `&limit=${limit}` : \"\"\n      }`,\n      {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${spotifyToken}`,\n        },\n      }\n    );\n\n    return userTopTracksResponse.json();\n  }\n\n  return Promise.reject(\"Invalid spotify auth token :(\");\n};\n\ninterface UserTopArtists {\n  items: Array<Artist>;\n}\n\ninterface UserTopTracks {\n  items: Array<Track>;\n}\n","import styled from \"styled-components\";\n\nexport const StyledTitle = styled.h1<{ fontSize?: string }>`\n  font-size: ${(props) => (props.fontSize ? props.fontSize : \"60px\")};\n  font-family: ${(props) => props.theme.fontAlt};\n  color: ${(props) => props.theme.primary};\n  font-weight: unset;\n  @media only screen and (max-width: 768px) {\n    font-size: 34px;\n  }\n`;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { AppContext } from \"../../AppContext\";\nimport { getUserTopArtists } from \"../../services/spotify-service\";\nimport { Artist } from \"../../services/spotify-types\";\nimport { StyledTitle } from \"../title/styled-title\";\nimport \"./spotify-top.scss\";\n\nconst SpotifyTopArtists = () => {\n  const { topArtists, setTopArtists, selectedTimeRange } = useContext(\n    AppContext\n  );\n\n  const [prevSelectedTimeRange, saveSelectedTimeRange] = useState(\n    selectedTimeRange\n  );\n  const [selectedArtist, setSelectedArtist] = useState({} as Artist);\n\n  const scrollSelector = (left: boolean) => {\n    const selectorElement = document.querySelector(\n      \".spotify-top__selector\"\n    ) as HTMLDivElement;\n    const scrollAmount = selectorElement.offsetWidth * (1 - 0.05);\n    selectorElement.scrollBy({\n      top: 0,\n      left: left ? -scrollAmount : scrollAmount,\n      behavior: \"smooth\",\n    });\n  };\n\n  useEffect(() => {\n    saveSelectedTimeRange(selectedTimeRange);\n\n    if (\n      !topArtists ||\n      topArtists.length < 1 ||\n      prevSelectedTimeRange !== selectedTimeRange\n    ) {\n      getUserTopArtists(`${selectedTimeRange}_term`).then((result) => {\n        setTopArtists(result.items);\n      });\n    }\n\n    setSelectedArtist(topArtists && topArtists[0]);\n    console.log(\"here\");\n    //TODO Scroll to start of selector\n  }, [prevSelectedTimeRange, selectedTimeRange, setTopArtists, topArtists]);\n\n  return (\n    <div className=\"spotify-top spotify-top--artists fade-in\">\n      <StyledTitle fontSize=\"60px\">Your top artists</StyledTitle>\n      <div className=\"spotify-top__scroll-buttons\"></div>\n      <div className=\"spotify-top__selector-container\">\n        <div\n          className=\"spotify-top__selector-container__scroll\"\n          onClick={() => scrollSelector(true)}\n        >\n          {\"<\"}\n        </div>\n        <div className=\"spotify-top__selector fade-in\">\n          {topArtists &&\n            topArtists.map((artist, index) => (\n              <ArtistSelector\n                artist={artist}\n                selected={artist === selectedArtist}\n                setSelectedArtist={setSelectedArtist}\n                key={index}\n              />\n            ))}\n        </div>\n        <div\n          className=\"spotify-top__selector-container__scroll\"\n          onClick={() => scrollSelector(false)}\n        >\n          {\">\"}\n        </div>\n      </div>\n\n      {selectedArtist && <SelectedArtist artist={selectedArtist} />}\n    </div>\n  );\n};\n\nconst ArtistSelector = ({\n  artist,\n  selected,\n  setSelectedArtist,\n}: {\n  artist: Artist;\n  selected: boolean;\n  setSelectedArtist: Function;\n}) => {\n  return (\n    <div\n      onClick={(e) => {\n        setSelectedArtist(artist);\n      }}\n      className={`spotify-top__selector__item fade-in ${\n        selected ? \"spotify-top__selector__item--selected\" : \"\"\n      }`}\n    >\n      <img\n        alt=\"artist\"\n        width={150}\n        height={150}\n        src={artist.images ? artist.images[0].url : \"\"} //TODO Not found image and possibly use lower res spotify img\n      />\n      <div className=\"spotify-top__selector__item__name\">{artist.name}</div>\n    </div>\n  );\n};\n\nconst SelectedArtist = ({ artist }: { artist: Artist }) => {\n  return (\n    <div className=\"spotify-top__selected\">\n      <div className=\"spotify-top__selected__title\">\n        <div className=\"spotify-top__selected__title__name\">{artist.name} </div>\n        <div className=\"spotify-top__selected__title__popularity\">\n          <div>{artist.popularity}</div>\n        </div>\n      </div>\n      <div className=\"spotify-top__selected__details\">\n        {artist.genres && artist.genres.length > 0 && (\n          <div className=\"spotify-top__selected__info-tile\">\n            <div className=\"spotify-top__selected__info-tile__title\">\n              Genres\n            </div>\n            {artist.genres.map((genre, index) => (\n              <span key={index}>{genre}</span>\n            ))}\n          </div>\n        )}\n        {artist.followers && (\n          <div className=\"spotify-top__selected__info-tile\">\n            <div className=\"spotify-top__selected__info-tile__title\">\n              Followers\n            </div>\n            <div>\n              {Intl.NumberFormat(\"en-us\").format(artist.followers.total)}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SpotifyTopArtists;\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","import { getWithExpiry, setWithExpiry } from \"../util/storage-util\";\n\nconst cryptoRandomString = require(\"crypto-random-string\");\nconst sha256 = require(\"crypto-js/sha256\");\nconst Base64 = require(\"crypto-js/enc-base64\");\n\nconst REDIRECT_URI =\n  process.env.REACT_APP_AUTH_REDIRECT_URI || \"http://localhost:3000/callback\";\nconst CLIENT_ID = \"a3c9a895bbe94102a08574ba4f4adc9e\";\nconst REQUEST_SCOPES = \"user-top-read\";\n\nexport enum GrantType {\n  AUTH = \"authorization_code\",\n  REFRESH = \"refresh_token\",\n}\n\nexport const spotifyAuthRequestUri = async () => {\n  const verifierCode = cryptoRandomString({ length: 48, type: \"url-safe\" });\n  localStorage.setItem(\"verifierCode\", verifierCode);\n\n  const challengeCode = base64URLEncode(await sha256(verifierCode));\n\n  const stateCode = cryptoRandomString({ length: 10, type: \"url-safe\" });\n  localStorage.setItem(\"stateCode\", stateCode);\n\n  return `https://accounts.spotify.com/authorize?response_type=code&client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&code_challenge_method=S256&code_challenge=${challengeCode}&state=${stateCode}&scope=${REQUEST_SCOPES}`;\n};\n\nexport const checkSpotifyTokenAndRefresh = () => {\n  const token = getWithExpiry(\"spotifyToken\");\n\n  if (token) {\n    return token;\n  } else if (getUserAccessToken(GrantType.REFRESH)) {\n    return localStorage.getItem(\"spotifyRefreshToken\");\n  }\n\n  return null;\n};\n\nexport const getUserAccessToken = async (\n  grantType: GrantType,\n  stateResponse?: string,\n  authCode?: string\n): Promise<boolean> => {\n  if (grantType === GrantType.REFRESH) {\n    const spotifyRefreshTokenRequest = {\n      grant_type: grantType,\n      refresh_token: localStorage.getItem(\"spotifyRefreshToken\"),\n      client_id: CLIENT_ID,\n    };\n\n    return fetchTokenFromSpotify(spotifyRefreshTokenRequest);\n  } else if (localStorage.getItem(\"stateCode\") === stateResponse) {\n    const spotifyTokenRequest = {\n      client_id: CLIENT_ID,\n      grant_type: grantType,\n      code: authCode,\n      redirect_uri: REDIRECT_URI,\n      code_verifier: localStorage.getItem(\"verifierCode\"),\n    };\n\n    return await fetchTokenFromSpotify(spotifyTokenRequest);\n  }\n\n  return false;\n};\n\nconst fetchTokenFromSpotify = async (spotifyTokenRequest: {}): Promise<\n  boolean\n> => {\n  const spotifyTokens = await fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    body: encodeFormData(spotifyTokenRequest),\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n  });\n\n  const tokens = await spotifyTokens.json();\n  if (tokens.access_token) {\n    setWithExpiry(\"spotifyToken\", tokens.access_token, tokens.expires_in);\n    localStorage.setItem(\"spotifyRefreshToken\", tokens.refresh_token);\n    return true;\n  }\n\n  return false;\n};\n\nconst base64URLEncode = (hash: any): string => {\n  return hash\n    .toString(Base64)\n    .replace(/=/g, \"\")\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\");\n};\n\nconst encodeFormData = (data: any) => {\n  return Object.keys(data)\n    .map((key) => encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]))\n    .join(\"&\");\n};\ninterface UserToken {\n  access_token: string;\n  refresh_token: string;\n  expires_in: number;\n}\n"],"sourceRoot":""}